server:
  port: 8001

#eureka client 配置
eureka:
  client: #客户端注册进eureka服务列表中
    service-url:
      defaultZone: http://localhost:7001/eureka
  instance:
    instance-id: system-dept8001 # 自定义服务名称信息
    prefer-ip-address: true #访问路径可以显示IP地址

management:
  endpoints:
    web:
      exposure:
        include: "*"
info:
  app.name: microcourse
  company.name: ahut
  build.artifactId: @project.artifactId@
  build.version: @project.version@
  
# MyBatis配置
mybatis:
  # 搜索指定包别名
  typeAliasesPackage: com.ahut.api.domain
  # 配置mapper的扫描，找到所有的mapper.xml映射文件
  mapperLocations: classpath:mybatis/mapper/**/*Mapper.xml
  # 加载全局的配置文件
  configLocation: classpath:mybatis/mybatis-config.xml

#连接池配置
spring:
  application:
    name: system-dept
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driverClassName: com.mysql.cj.jdbc.Driver
    druid:
      url: jdbc:mysql://8.136.210.255:3306/hzj?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
      username: root
      password: Admin@123
      # 初始连接数
      initialSize: 5
      # 最小连接池数量
      minIdle: 10
      # 最大连接池数量
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      # 配置一个连接在池中最大生存的时间，单位是毫秒
      maxEvictableIdleTimeMillis: 900000
      # 配置检测连接是否有效
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      webStatFilter:
        enabled: true
      statViewServlet:
        enabled: true
        # 设置白名单，不填则允许所有访问
        allow:
        url-pattern: /druid/*
        # 控制台管理用户名和密码
        login-username:
        login-password:
      filter:
        stat:
          enabled: true
          # 慢SQL记录
          log-slow-sql: true
          slow-sql-millis: 5000
          merge-sql: true
        wall:
          config:
            multi-statement-allow: true                                # 等待连接获取的最大超时时间
      
